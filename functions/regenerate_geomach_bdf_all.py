import numpy as np

from pyFSI.geomach_aircraft_models.conventional5 import Conventional5


#--imports---
import re
import os
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy
import math


from pyFSI.class_str.grid.class_structure import grid
from pyFSI.class_str.elements.class_structure import CTRIA3
from pyFSI.class_str.material.class_structure import PSHELL
from pyFSI.class_str.material.class_structure import PBARL
from pyFSI.class_str.material.class_structure import MAT1
from pyFSI.class_str.load_disp_bc.class_structure import FORCE
from pyFSI.class_str.load_disp_bc.class_structure import PLOAD
from pyFSI.class_str.load_disp_bc.class_structure import SPC
from pyFSI.class_str.io.class_structure import SU2_import

from pyFSI.class_str.io.nastran_datatype_write_formats import float_form
from pyFSI.class_str.io.nastran_datatype_write_formats import int_form
from pyFSI.class_str.io.nastran_datatype_write_formats import str_form

from pyFSI.class_str.io.nastran_datatype_write_formats import float_forms
from pyFSI.class_str.io.nastran_datatype_write_formats import int_forms
from pyFSI.utility_functions.pressure_interpolation import pressure_interpolation


from pyFSI.class_str.optimization.constraints.class_structure import DCONSTR
from pyFSI.class_str.optimization.constraints.class_structure import DCONADD
from pyFSI.class_str.optimization.constraints.class_structure import DRESP
from pyFSI.class_str.optimization.constraints.class_structure import DRESP1
from pyFSI.class_str.optimization.constraints.class_structure import DRESP2
from pyFSI.class_str.optimization.constraints.class_structure import DDVAL
from pyFSI.class_str.optimization.constraints.class_structure import DEQUATN
from pyFSI.class_str.optimization.constraints.class_structure import DESVAR
from pyFSI.class_str.optimization.constraints.class_structure import DVPREL1
from pyFSI.class_str.optimization.constraints.class_structure import DVCREL1
from pyFSI.class_str.optimization.constraints.class_structure import DVGRID
from pyFSI.class_str.optimization.constraints.class_structure import DLINK
from pyFSI.class_str.optimization.constraints.class_structure import DOPTPRM

from pyFSI.utility_functions.print_equation import print_equation


from pyFSI.input.read_nas_file import read_nas_file
from pyFSI.utility_functions.interpolate_grid import interpolate_grid
from pyFSI.output.write_tecplot_file import write_tecplot_file
from pyFSI.output.write_tecplot_file_str import write_tecplot_file_str
from pyFSI.input.read_beam_numbers import read_beam_numbers
from pyFSI.input.read_constraints import read_constraints
from pyFSI.input.read_su2_surface_file import read_su2_surface_file

from pyFSI.input.read_beam import read_beam
from pyFSI.input.read_beam_numbers import read_beam_numbers
from pyFSI.input.read_opt_f06_file import read_opt_f06_file
from pyFSI.input.read_opt_f06_file_stress import read_opt_f06_file_stress
from pyFSI.utility_functions.interpolate_grid_brown import interpolate_grid_brown

from pyFSI.input.read_geomach_structural_file import read_geomach_structural_file

from pyFSI.class_str.solution_classes.sol200 import sol200
#from python_nastran_io.class_str.solution_classes.sol101 import sol101
#-----------
#---function to convert integers to required nastran format
from interpolate_loads import interpolate_loads
from pyFSI.output.write_tacs_load_file import write_tacs_load_file
from pyFSI.input.read_bdf_file import read_bdf_file


#read the file

#mark the existing components

#combine them, write the map

#write out the bdf file

#end with a max case where each element is a design variable

#for external components group by j

def regenerate_geomach_bdf_all(bdf_structural_meshfile,aircraft):
    scaling_factor = 1.0
    elemlist,pointlist,no_of_points,no_of_elements,material_list,no_of_materials,shell_element_list,no_of_shell_elements,constrained_grid_point_list,no_of_constrained_grid_points = read_bdf_file(bdf_structural_meshfile,scaling_factor)




    #rename the old file to a new file,
    os.rename(bdf_structural_meshfile, bdf_structural_meshfile+".old")


#---write a bdf file for geomach-------------------------------------------------------------------

    fo = open(bdf_structural_meshfile,"wb")
    #---------Executive_control_section----------------------------------------
    fo.write("$ Generated by ICEMCFD -  NASTRAN Interface Vers.  4.6.1 \n")
    fo.write("$ Nastran input deck \n")
    fo.write("SOL 103 \n")
    #fo.write("\n")
    
    fo.write("CEND \n")
    #fo.write("\n")
    fo.write("$\n")
    fo.write("BEGIN BULK \n")
        
    #write shell element data
    #------------writing element property data------
    for i in range(0, no_of_elements):
        
        fo.write("$CDSCRPT");
        fo.write(str_form('        '));
        fo.write(str_form('        '));
        fo.write(int_form(i+1));
        fo.write(str_form('        '));
        fo.write(str_form("f_"+str(i+1)));
        fo.write("\n");


    fo.write("$\n")
    fo.write("$       grid data              0  \n")


    #------------16 point string----------------

    for i in range(0,no_of_points):
        
        fo.write(str_form('GRID*'));
        fo.write(int_forms(pointlist[i].id));
        fo.write(int_forms(pointlist[i].cp));
        fo.write(float_forms(pointlist[i].x[0]));
        fo.write(float_forms(pointlist[i].x[1]));
        fo.write(str_form('*G'+str(pointlist[i].id)))
        fo.write("\n");
        fo.write(str_form('*G'+str(pointlist[i].id)))
        fo.write(float_forms(pointlist[i].x[2]));
        fo.write(str_form('        '));
        fo.write(int_forms(pointlist[i].cd));
        
        #    fo.write(int_form(pointlist[i].ps));
        #    fo.write(int_form(pointlist[i].seid));
        fo.write("\n");


    #------------writing element data------
    #fo.write("$write element data\n")
    
    #--write to the grid points-

    for i in range(0,no_of_elements):
        
        fo.write(str_form(elemlist[i].type));
        fo.write(int_form(elemlist[i].eid));
        #fo.write(int_form(int(element_map[elemlist[i].pid-1])));
        fo.write(int_form(i+1));
        fo.write(int_form(elemlist[i].g[0]));
        fo.write(int_form(elemlist[i].g[1]));
        fo.write(int_form(elemlist[i].g[2]));
        
        if(elemlist[i].type=='CQUAD4'):
            fo.write(int_form(elemlist[i].g[3]));
    
    
        #        fo.write(int_form(global_to_loc_points[elemlist[i].g[0]]));
        #        fo.write(int_form(global_to_loc_points[elemlist[i].g[1]]));
        #        fo.write(int_form(global_to_loc_points[elemlist[i].g[2]]));
        
        #print elemlist[i].g[0],elemlist[i].g[1],elemlist[i].g[2]
        #print global_to_loc_points[elemlist[i].g[0]],elemlist[i].g[1],elemlist[i].g[2]
        
        
        fo.write("\n")



        #-----------------spc data------------
        #fo.write("$spc data\n")
    for i in range(0,no_of_constrained_grid_points):
        #        fo.write(str_form(constrained_grid_point_list[i].type));
        #        fo.write(int_form(constrained_grid_point_list[i].sid));
        #        #fo.write(int_form(constrained_grid_point_list[i].g[0]));
        #
        #        fo.write(int_form(global_to_loc_points[constrained_grid_point_list[i].g[0]]));
        #        fo.write(int_form(constrained_grid_point_list[i].c1));
        #        fo.write(float_form(constrained_grid_point_list[i].d1));
        
        fo.write(str_form("SPC"));
        #fo.write(str_form('        '));
        #fo.write(format('         '));
        #fo.write(str_form(constrained_grid_point_list[i].type));
        fo.write(int_form(constrained_grid_point_list[i].sid));
        fo.write(int_form(constrained_grid_point_list[i].g1))
        fo.write(int_form(constrained_grid_point_list[i].c1));
        fo.write(float_form(0.0));
        
        #fo.write(float_form(constrained_grid_point_list[i].d1));
        
        
        fo.write("\n");

    fo.write("END BULK")

